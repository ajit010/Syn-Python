PCAP sample questions :


Links -- https://www.examtopics.com/exams/python-institute/pcap/view/


==================================================================================

DAY 4 :


Classes and Objects :

1. Create a class called `Rectangle` with attributes `length` and `width`. Include methods to calculate the area and perimeter of the rectangle.

Solution :

# Rectangle Class

class Rectangle:
    def __init__(self, length, width):
        self.length = length
        self.width = width

    def area(self):
        return self.length * self.width

    def perimeter(self):
        return 2 * (self.length + self.width)

# Example usage
rect = Rectangle(10, 5)
print("Area:", rect.area())
print("Perimeter:", rect.perimeter())

2. Create a class called `Employee` with attributes `name`, `age`, and `salary`. Include a method to display the details of the employee.

3. Create a class called `Car` with attributes `make`, `model`, and `year`. Include a method to display the details of the car.

4. Create a class called `Circle` with attribute `radius`. Include methods to calculate the area and circumference of the circle.

5. Create a class called `Student` with attributes `name`, `age`, and `grade`. Include a method to display the details of the student.


Solution --

class Student:
    def __init__(self, name="", age=0, grade=""):
        self.name = ""
        self.age = 0
        self.grade = ""

    def get_data(self):
        self.name = input("Enter your name: ")
        self.age = int(input("Enter your age: "))
        self.grade = input("Enter your grade: ")

    def display_details(self):
        print("Name:", self.name)
        print("Age:", self.age)
        print("Grade:", self.grade)

# Example usage
student1 = Student()
student1.get_data()
student1.display_details()
student2 = Student()
student2.get_data()
student2.display_details()
student3 = Student()
student3.get_data()
student3.display_details()


6. Create a class called `BankAccount` with attributes `account_number`, `balance`, and `owner`. Include methods to deposit and withdraw money from the account.

7. Create a class called `Book` with attributes `title`, `author`, and `pages`. Include a method to display the details of the book.

8. Create a class called `Dog` with attributes `name`, `age`, and `breed`. Include a method to display the details of the dog.

9. Create a class called `Triangle` with attributes `side1`, `side2`, and `side3`. Include a method to check if the triangle is valid and another method to calculate its area.

10. Create a class called `Bank` with attributes `name` and `branches`. Include methods to add a new branch, display all branches, and find a branch by name.

Create these programs 1-10 including defining classes, creating objects, accessing attributes, and implementing methods.

=================================================================================================

OOP Principles -- Inheritance, Polymorphism an Encapsulation :

Inheritannce :

# Employee with Inheritance 

# Input section (at the top)
name = input("Enter employee name: ")
age = int(input("Enter employee age: "))
salary = float(input("Enter employee salary: "))

# Class definitions
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

class Employee(Person):
    def __init__(self, name, age, salary):
        super().__init__(name, age)
        self.salary = salary

    def display(self):
        print(f"\nEmployee Details:")
        print(f"Name   : {self.name}")
        print(f"Age    : {self.age}")
        print(f"Salary : {self.salary}")

# Object creation and method call
emp = Employee(name, age, salary)
emp.display()



Polymorphism :

# Inheritance + Polymorphism 

# Input section (at the top)
animal_type = input("Enter animal type (dog/cat/animal): ")

# Class definitions
class Animal:
    def speak(self):
        print("The animal makes a sound.")

class Dog(Animal):
    def speak(self):
        print("Woof!")

class Cat(Animal):
    def speak(self):
        print("Meow!")

# Object creation and method call based on user input
if animal_type == "dog":
    pet = Dog()
elif animal_type == "cat":
    pet = Cat()
else:
    pet = Animal()

pet.speak()



Encapsulation :


# Bank program with Encapsulation :

# Input section (at the top)
account_holder = input("Enter account holder name: ")
initial_balance = float(input("Enter initial balance: "))

# Class definition using Encapsulation
class BankAccount:
    def __init__(self, name, balance):
        self.__name = name            # private variable
        self.__balance = balance      # private variable

    # Getter method for name
    def get_name(self):
        return self.__name

    # Getter method for balance
    def get_balance(self):
        return self.__balance

    # Setter method for deposit
    def deposit(self, amount):
        if amount > 0:
            self.__balance += amount
            print(f"Deposited ₹{amount}")
        else:
            print("Invalid deposit amount.")

    # Setter method for withdrawal
    def withdraw(self, amount):
        if 0 < amount <= self.__balance:
            self.__balance -= amount
            print(f"Withdrew ₹{amount}")
        else:
            print("Insufficient balance or invalid amount.")

    # Display account summary
    def show_account(self):
        print(f"\nAccount Holder: {self.__name}")
        print(f"Current Balance: ₹{self.__balance}")

# Create object
acc = BankAccount(account_holder, initial_balance)

# Operations (example interaction)
acc.deposit(float(input("Enter amount to deposit: ")))
acc.withdraw(float(input("Enter amount to withdraw: ")))

# Final account summary
acc.show_account()


=========================================================================================


=========================================================================================
